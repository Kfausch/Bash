#!/usr/bin/env bash

# This script generates a password based on user input and complexity.
# It then optionally updates the user's password on the system.

# Prompt the user for password length and complexity
read -p "Enter desired password length: " LENGTH
clear  # Clear the terminal after input

read -p "On a scale of 1-3 (1=least complex, 3=most complex), select complexity: " COMPLEXITY
clear

# Read from our chars.txt file
DIGITS=$(sed -n '1p' chars.txt)            # Line 1
SPECIAL=$(sed -n '2p' chars.txt)           # Line 2
LOWERCASE=$(sed -n '3p' chars.txt)         # Line 3
UPPERCASE=$(sed -n '4p' chars.txt)         # Line 4

# Based on complexity, choose which sets of characters to use
if [ "$COMPLEXITY" -eq 1 ]; then
    CHARPOOL="$DIGITS$LOWERCASE"
elif [ "$COMPLEXITY" -eq 2 ]; then
    CHARPOOL="$DIGITS$LOWERCASE$UPPERCASE"
else
    CHARPOOL="$DIGITS$LOWERCASE$UPPERCASE$SPECIAL"
fi

# Generate the password
PASSWORD=""
for i in $(seq 1 $LENGTH); do
    # Use $RANDOM to pick a random character
    RANDCHAR=${CHARPOOL:$((RANDOM % ${#CHARPOOL})):1}
    PASSWORD="$PASSWORD$RANDCHAR"
done

echo "Your generated password is: $PASSWORD"
echo

# Ask if the user wants to update their system user password
read -p "Do you want to update your system password for user $USER? (y/n): " UPDATE_CHOICE

if [ "$UPDATE_CHOICE" = "y" ] || [ "$UPDATE_CHOICE" = "Y" ]; then
    echo -e "$PASSWORD\n$PASSWORD" | passwd $USER
    if [ $? -eq 0 ]; then
        echo "System password updated successfully."
    else
        echo "Failed to update system password."
    fi
else
    echo "System password not updated."
fi
